{"version":3,"sources":["useBreedList.tsx","Pet.tsx","Results.tsx","actionCreators/index.js","SearchParams.tsx"],"names":["changeTheme","theme","type","payload","changeAnimal","animal","changeBreed","breed","changeLocation","location"],"mappings":"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","file":"SearchParams.c33e490a.js","sourceRoot":"../src","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { Animal, BreedListAPIResponse } from \"./APIResponseTypes\";\n\nconst localCache: { [index: string]: string[] } = {};\n\ntype Status = \"unloaded\" | \"loading\" | \"loaded\";\n\nexport default function useBreedList(animal: Animal): [string[], Status] {\n  const [breedList, setBreedList] = useState([] as string[]);\n  const [status, setStatus] = useState(\"unloaded\" as Status);\n\n  useEffect(() => {\n    if (!animal) {\n      setBreedList([]);\n    } else if (localCache[animal]) {\n      setBreedList(localCache[animal]);\n    } else {\n      void requestBreedList();\n    }\n    async function requestBreedList() {\n      setBreedList([]);\n      setStatus(\"loading\");\n      const res = await fetch(\n        `http://pets-v2.dev-apis.com/breeds?animal=${animal}`\n      );\n      const json = (await res.json()) as BreedListAPIResponse;\n      localCache[animal] = json.breeds || [];\n      setBreedList(localCache[animal]);\n      setStatus(\"loaded\");\n    }\n  }, [animal]);\n\n  return [breedList, status];\n}\n","import { Link } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\nimport { Animal } from \"./APIResponseTypes\";\n\ninterface IProps {\n  name: string;\n  animal: Animal;\n  breed: string;\n  images: string[];\n  location: string;\n  id: number;\n}\n\nconst Pet: FunctionComponent<IProps> = ({\n  name,\n  animal,\n  breed,\n  images,\n  location,\n  id,\n}) => {\n  let hero = \"http://pets-images.dev-apis.com/pets.none.jpg\";\n  if (images && images.length) {\n    hero = images[0];\n  }\n  return (\n    <Link to={`/details/${id}`} className=\"relative block rounded\">\n      <div className=\"rounded\">\n        <img\n          src={hero}\n          alt={name}\n          className=\"rounded w-full h-full bg-contain bg-no-repeat\"\n        ></img>\n      </div>\n      <div className=\"absolute bottom-0 left-0 bg-gradient-to-tr from-white to-transparent p-2\">\n        <h1>{name}</h1>\n        <h2>{`${animal} - ${breed} - ${location}`}</h2>\n      </div>\n    </Link>\n  );\n};\n\nexport default Pet;\n","import Pet from \"./Pet\";\nimport { Pet as PetType } from \"./APIResponseTypes\";\nimport { FunctionComponent } from \"react\";\n\nconst Results: FunctionComponent<{ pets: PetType[] }> = ({ pets }) => {\n  return (\n    <div className=\"grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3\">\n      {!pets.length ? (\n        <h2>No pets found</h2>\n      ) : (\n        pets.map((pet) => (\n          <Pet\n            name={pet.name}\n            animal={pet.animal}\n            breed={pet.breed}\n            images={pet.images}\n            location={`${pet.city}, ${pet.state}`}\n            key={pet.id}\n            id={pet.id}\n          />\n        ))\n      )}\n    </div>\n  );\n};\nexport default Results;\n","export function changeTheme(theme) {\n    return { type: 'CHANGE_THEME', payload: theme }\n}\n\nexport function changeAnimal(animal) {\n    return { type: 'CHANGE_ANIMAL', payload: animal }\n}\n\nexport function changeBreed(breed) {\n    return { type: 'CHANGE_BREED', payload: breed }\n}\n\nexport function changeLocation(location) {\n    return { type: 'CHANGE_LOCATION', payload: location }\n}","import { useState, useEffect, FunctionComponent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport useBreedList from \"./useBreedList\";\nimport Results from \"./Results\";\nimport { Animal, Pet, PetAPIResponse } from \"./APIResponseTypes\";\nimport {\n  changeLocation,\n  changeAnimal,\n  changeTheme,\n  changeBreed,\n} from \"./actionCreators\";\nconst ANIMALS = [\"bird\", \"cat\", \"dog\", \"new\"];\n\nconst SearchParams: FunctionComponent = () => {\n  const animal = useSelector((state) => state.animal);\n  const location = useSelector((state) => state.location);\n  const breed = useSelector((state) => state.breed);\n  const theme = useSelector((state) => state.theme);\n\n  const [pets, setPets] = useState([] as Pet[]);\n  const [breeds] = useBreedList(animal);\n\n  useEffect(() => {\n    void requestPets();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const requestPets = async () => {\n    const res = await fetch(\n      `http://pets-v2.dev-apis.com/pets?animal=${animal}&location=${location}&breed=${breed}`\n    );\n    const json = (await res.json()) as PetAPIResponse;\n    console.log(json);\n    setPets(json.pets);\n  };\n  return (\n    <div className=\"my-0 mx-auto w-11/12 \">\n      <form\n        className=\"p-10 mb-10 rounded-lg bg-gray-200 shadow-lg \n                flex flex-col justify-center items-center divide-y divide-gray-900\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          void requestPets();\n        }}\n      >\n        <label htmlFor=\"location\" className=\"search-label\">\n          Location\n          <input\n            className=\"search-control\"\n            id=\"location\"\n            value={location}\n            placeholder=\"Location\"\n            onChange={(e) => dispatch(changeLocation(e.target.value))}\n          />\n        </label>\n        <label htmlFor=\"animal\" className=\"search-label\">\n          Animal\n          <select\n            className=\"search-control\"\n            id=\"animal\"\n            value={animal}\n            onChange={(e) => dispatch(changeAnimal(e.target.value as Animal))}\n            onBlur={(e) => dispatch(changeAnimal(e.target.value as Animal))}\n          >\n            <option />\n            {ANIMALS.map((animal) => (\n              <option value={animal} key={animal}>\n                {\" \"}\n                {animal}{\" \"}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"breed\" className=\"search-label\">\n          Breed\n          <select\n            className=\"search-control disabled:opacity-50\"\n            id=\"breed\"\n            value={breed}\n            onChange={(e) => dispatch(changeBreed(e.target.value))}\n            onBlur={(e) => dispatch(changeBreed(e.target.value))}\n          >\n            <option />\n            {breeds.map((breed) => (\n              <option value={breed} key={breed}>\n                {\" \"}\n                {breed}{\" \"}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"theme\" className=\"search-label\">\n          Theme\n          <select\n            className=\"search-control\"\n            value={theme}\n            onChange={(e) => dispatch(changeTheme(e.target.value))}\n            onBlur={(e) => dispatch(changeTheme(e.target.value))}\n          >\n            <option value=\"darkblue\"> Dark Blue</option>\n            <option value=\"pink\"> Pink </option>\n          </select>\n        </label>\n        <button\n          className=\"rounded px-6 py-2 text-white hover:opacity-50 border-none\"\n          style={{ backgroundColor: theme }}\n        >\n          Submit\n        </button>\n      </form>\n      <Results pets={pets} />\n    </div>\n  );\n};\n\nexport default SearchParams;\n"]}